{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nFrontLeft = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nFrontRight = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\nBackLeft = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nBackRight = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nCatapult1 = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nCatapult2 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nLeftExpand = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nRightExpand = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nGPS_Sense = Gps(Ports.PORT4, 0.00, -29.97, MM, 180)\nDist_Sense = Distance(Ports.PORT12)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n#################### Setup ####################\nbrain.screen.set_cursor(1,1)\nbrain.screen.print(\"Initializing Config\")\n# Define Global Variables\nglobal SpeedMult, MatchLoad, Expand, WheelC\nWheelC = 259.34 # Wheel Circumference \nratio = .6 # Wheel Gear Ratio\nSpeedMult = 0 # Multiplier For Drive Speed\nMatchLoad = False # Set Matchloading To False\nExpand = False # Set Expanded To False\n# Set All Drive And Expansion Motors To Hold Their Position Upon Stopping\nLeftExpand.set_stopping(HOLD)\nRightExpand.set_stopping(HOLD)\nFrontRight.set_stopping(HOLD)\nFrontLeft.set_stopping(HOLD)\nBackRight.set_stopping(HOLD)\nBackLeft.set_stopping(HOLD)\n# Set Expansion Velocity\nLeftExpand.set_velocity(100, PERCENT)\nRightExpand.set_velocity(100, PERCENT)\n# Set Catapult Velocity\nCatapult1.set_velocity(40, PERCENT)\nCatapult2.set_velocity(40, PERCENT)\n\nbrain.screen.next_row()\nbrain.screen.print(\"Initialized\")\nbrain.screen.clear_screen()\n\n#################### Functions ####################\n\n########## Movement ##########\n\n# Custom Movement Controller Class\ndef Movement_Action(speed, rotate, waits, rev):\n    # Movement_Action(Speed %, Rotate[1=rotate, 0=forward], Wait?[0=n, >0= time inputted], Revolutions?)\n    global SpeedMult\n    if rev > 0:\n        # If A Predefined Amount Of Rotations Is Specified Perform This\n        # Sets Velocity Of Drive To Inputted Value\n        Motor_Velo(speed)\n        # Start The Drive Wheels\n        FrontRight.spin_for(FORWARD, rev, TURNS, wait=False)\n        FrontLeft.spin_for(FORWARD, rev, TURNS, wait=False)\n        BackRight.spin_for(FORWARD, rev, TURNS, wait=False)\n        # Last Wheel Will Prevent Progression Until Turn Is Completed\n        BackLeft.spin_for(FORWARD, rev, TURNS, wait=True)\n    elif rotate == 0:\n        # Sets Velocity Of Drive To Inputted Value\n        Motor_Velo(speed)\n        # Start The Drive Wheels\n        FrontRight.spin(FORWARD)\n        FrontLeft.spin(FORWARD)\n        BackRight.spin(FORWARD)\n        BackLeft.spin(FORWARD)\n    else:\n        # Sets Velocity Of Drive To Inputted Value\n        Motor_Velo(speed)\n        # Start The Drive Wheels\n        FrontRight.spin(FORWARD)\n        FrontLeft.spin(REVERSE)\n        BackRight.spin(FORWARD)\n        BackLeft.spin(REVERSE)\n    if waits > 0:\n        # If Wait Was Specified Wait The Amount Of Time Inputted In Seconds Then Stop Drive Motors\n        wait(waits, SECONDS)\n        Stop_motors()\n    \ndef Motor_Velo(speed):\n    # Sets All Drive Motor Velocities To Inputted Value\n    FrontRight.set_velocity(speed, PERCENT)\n    FrontLeft.set_velocity(speed, PERCENT)\n    BackRight.set_velocity(speed, PERCENT)\n    BackLeft.set_velocity(speed, PERCENT)\n\ndef Stop_motors():\n    # Stops The Drive Motors\n    FrontRight.stop()\n    FrontLeft.stop()\n    BackRight.stop()\n    BackLeft.stop()\n\n\n########## Position Calculation ##########\n\n\ndef TurnTo(degrees):\n    # TurnTo(degrees[Angle About The Origin Of Robot])\n    # Sets Margin Of Success\n    askew = 3\n    # Gets The Difference Between The Degrees And The Current Degrees\n    d = GPS_Sense.heading() - degrees % 360\n    if d >= 180 or (d <= 0 and d > -180):\n        # Start The Turn To The Right\n        Movement_Action(10, 1, 0, 0)\n        # Waits Until Heading Is Facing Degree Margin\n        while (GPS_Sense.heading() < degrees - askew) or (GPS_Sense.heading() > degrees + askew):\n            pass\n        # Stop The Drive After The Robot Reaches The Point\n        Stop_motors()\n\n    elif d <= -180 or (d > 0 and d < 180):\n        # Start The Turn To The Left\n        Movement_Action(-10, 1, 0, 0)\n        # Waits Until Heading Is Facing Degree Margin\n        while (GPS_Sense.heading() > degrees + askew) or (GPS_Sense.heading() < degrees - askew): \n            pass\n        # Stop The Drive After The Robot Reaches The Point\n        Stop_motors()\n    else:\n        # If Result Out Of Bounds\n        brain.screen.next_row()\n        brain.screen.print(\"Error\")\n\ndef GoTo(x,y,speed):\n    # Get The Slope Of The Line Between The Current Position And The Position To Go To\n    deltax = x - GPS_Sense.x_position(MM)\n    deltay = y - GPS_Sense.y_position(MM)\n    # Find The Angle Between The Current Position And The Position To Go To On a Right Triangle\n    # Then Convert The Radian Output To Degrees And Locate It On The Unit Circle\n    angle = math.atan2(deltax,deltay) * 180 / math.pi % 360\n    # Calculates The Distance To The Point\n    Dist = math.sqrt(deltax**2 + deltay**2)\n    # Turn To The Angle\n    TurnTo(angle)\n    wait(.2,SECONDS)\n    # Calculates The Number Of Turns The Wheels Need To Make To Reach A Certain Distance\n    turns = Dist / WheelC * ratio\n    # Start The Move\n    Movement_Action(speed, 0, 0, turns)\n    # Stop The Drive After The Robot Reaches The Point\n    Stop_motors()\n\n########## Robot Elements ##########\n\n\ndef Catapult_Toggle():\n    global MatchLoad\n    # Operates The Catapult\n    if MatchLoad == False:\n        # Set Matchloading To True\n        MatchLoad = True\n        # Starts The Catapult\n        Catapult1.spin(REVERSE)\n        Catapult2.spin(REVERSE)\n\n    else:\n        # Set Matchloading To False\n        MatchLoad = False\n        # Stops The Catapult\n        Catapult1.stop()\n        Catapult2.stop()\n\ndef Expansion_Toggle():\n    global Expand\n    # Makes the Expansion Lock\n    if Expand == False:\n        # Sets Expanded To True\n        Expand = True\n        # Expands Out\n        LeftExpand.spin(FORWARD)\n        RightExpand.spin(FORWARD)\n    else:\n        # Sets Expanded To Fasle\n        Expand = False\n        # Retracts The Expansion\n        LeftExpand.spin(REVERSE)\n        RightExpand.spin(REVERSE)\n        Thread(Close)\n\ndef Close():\n    # Stops The Expansion Motors After 2 Seconds\n    wait(2, SECONDS)\n    LeftExpand.stop()\n    RightExpand.stop()\n    LeftExpand.set_velocity(100, PERCENT)\n    RightExpand.set_velocity(100, PERCENT)\n\ndef Left_Expand():\n    global Expand\n    # Makes the Expansion Lock\n    if Expand == False:\n        # Sets Expanded To True\n        Expand = True\n        # Expands Out\n        LeftExpand.spin(FORWARD)\n    else:\n        # Sets Expanded To Fasle\n        Expand = False\n        # Retracts The Expansion\n        LeftExpand.spin(REVERSE)\n        Thread(Close)\n\n\n\n### Start Of Autonomous ###\n\n# Add 15 Ms Delay To Make Sure Actions Are Registered\nwait(15, MSEC)\n\n# Hit The Alliance Triball Into Position\nLeftExpand.set_velocity(100, PERCENT)\nLeftExpand.spin_to_position(90, DEGREES, False)\nwait(.5, SECONDS)\n\n# UnExpand\nLeftExpand.set_velocity(50, PERCENT)\nLeftExpand.spin_to_position(-10, DEGREES, False)\n# Thread Stopping The Expansion\nThread(Close)\nwait(.3, SECONDS)\n\n### Start Match Loading ###\n\n# Drive Backward Against Match Load Bar\nMovement_Action(-30, 0, 1, 0)\n\n### Catapult Triggers ###\nMovement_Action(-10, False, 0, 0)\nCatapult_Toggle()\nwait(36,SECONDS) #36\nCatapult_Toggle()\nwait(.2,SECONDS)\n\n### Leave Match Loading Bar ###\nMovement_Action(-30, 1, .5, 0)\nwait(.2,SECONDS)\n\n# Hit Alliance Triballs Into Goal\nMovement_Action(100, 0, .5, 0)\nwait(.2,SECONDS)\nMovement_Action(-70, 0, .5, 0)\nwait(.2,SECONDS)\n\n# Line Up To Go Over Bar\n\nTurnTo(270)\nwait(.2,SECONDS)\nMovement_Action(100, 0, .4, 0)\nwait(.4,SECONDS)\nGoTo(0, 755, 70) #50\nwait(.2, SECONDS)\nTurnTo(270)\nwait(.2,SECONDS)\n\n### Drive Over Middle ###\n\n# Keeps Going Forward Till Were Over The Bar\nwhile (GPS_Sense.x_position(MM) > -750) or (GPS_Sense.gyro_rate(AxisType.YAXIS, VelocityUnits.DPS) > 5) or (GPS_Sense.gyro_rate(AxisType.YAXIS, VelocityUnits.DPS) < -5) or (GPS_Sense.quality() != 100): #300\n    Movement_Action(100, 0, 0, 0)\n# Stops Driving\nStop_motors()\nwait(.2, SECONDS)\nMovement_Action(-50, 0, .2, 0)\nwait(.2,SECONDS)\n### Other Side Of Field ###\n\n# Turn\nTurnTo(180)\nwait(.2,SECONDS)\n\ndriveTurns = 300 / WheelC * ratio\nturnTime = .5\ndef leftDelayedExpand(delaySec):\n    wait(delaySec, SECONDS)\n    Left_Expand()\nfor i in range(3):\n    Movement_Action(70, 0, 0, driveTurns)\n    Thread(leftDelayedExpand(0.6*turnTime))\n    Movement_Action(50, 1, turnTime, 0)\n    Left_Expand()\n    TurnTo(180)\n    wait(.2, SECONDS)\n\nMovement_Action(-70, 0, 0, .25)","textLanguage":"python","rconfig":[{"port":[9],"name":"FrontLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"FrontRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"BackLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"BackRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"Catapult1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"Catapult2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"LeftExpand","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"RightExpand","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"GPS_Sense","customName":true,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"-1.18","yOffsetUnit":"in","thetaOffset":"180"},"triportSourcePort":22},{"port":[12],"name":"Dist_Sense","customName":true,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.1","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}