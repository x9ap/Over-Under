{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nFrontLeft = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nFrontRight = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\nBackLeft = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nBackRight = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nCatapult1 = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nCatapult2 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nLeftExpand = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nRightExpand = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nglobal SpeedMult, Start_Calibrated, MatchLoad, Expand\nSpeedMult = 0\nStart_Calibrated = False\nMatchLoad = False\nExpand = False\nLeftExpand.set_stopping(HOLD)\nRightExpand.set_stopping(HOLD)\n\ndef Forward_Speed(Forward_Speed__Speed):\n    global SpeedMult, Start_Calibrated, MatchLoad, Expand\n    Set_all_wheel_velocities_Joystick(Forward_Speed__Speed)\n    if math.fabs(controller_1.axis2.position()) <= 10:\n        FrontRight.spin(FORWARD)\n        FrontLeft.spin(REVERSE)\n        BackRight.spin(FORWARD)\n        BackLeft.spin(REVERSE)\n    else:\n        FrontRight.spin(FORWARD)\n        FrontLeft.spin(FORWARD)\n        BackRight.spin(FORWARD)\n        BackLeft.spin(FORWARD)\n\ndef Set_all_wheel_velocities_Joystick(Set_all_wheel_velocities_Joystick__Joystick):\n    global SpeedMult, Start_Calibrated, MatchLoad, Expand\n    # Sets wheel velocities to the throttle multiplier of the joystick position\n    if controller_1.axis1.position() > 20:\n        if math.fabs(controller_1.axis2.position()) < 20:\n            FrontRight.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n            FrontLeft.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n            BackRight.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n            BackLeft.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n        else:   \n            FrontRight.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n            FrontLeft.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult / (controller_1.axis1.position()/10)), PERCENT)\n            BackRight.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n            BackLeft.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult / (controller_1.axis1.position()/10)), PERCENT)\n    elif controller_1.axis1.position() < -20:\n        if math.fabs(controller_1.axis2.position()) < 20:\n            FrontRight.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n            FrontLeft.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n            BackRight.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n            BackLeft.set_velocity((controller_1.axis1.position() * SpeedMult), PERCENT)\n        else:\n            FrontRight.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult / (controller_1.axis1.position()/-10)), PERCENT)\n            FrontLeft.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n            BackRight.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult / (controller_1.axis1.position()/-10)), PERCENT)\n            BackLeft.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n    else:\n        FrontRight.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n        FrontLeft.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n        BackRight.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n        BackLeft.set_velocity((Set_all_wheel_velocities_Joystick__Joystick * SpeedMult), PERCENT)\n\ndef Stop_motors():\n    global SpeedMult, Start_Calibrated, MatchLoad, Expand\n    FrontRight.stop()\n    FrontLeft.stop()\n    BackRight.stop()\n    BackLeft.stop()\n\ndef when_started1():\n    global SpeedMult, Start_Calibrated, MatchLoad, Expand\n    # On startup set predefined variables\n    SpeedMult = .3\n    controller_1.screen.clear_screen()\n    controller_1.screen.clear_row(3)\n    controller_1.screen.set_cursor(1, 1)\n    controller_1.screen.print(\"Throttle: \")\n    controller_1.screen.print(SpeedMult * 10)\n    controller_1.screen.set_cursor(2,1)\n    controller_1.screen.print(\"Demonstration Mode\")\n    controller_1.screen.set_cursor(3,1)\n    controller_1.screen.print(\"Max Speed Limited\")\n    Start_Calibrated = True\n\ndef onevent_controller_1buttonL1_pressed_0():\n    global SpeedMult, Start_Calibrated, MatchLoad, Expand\n    # Throttle Decrease\n    if SpeedMult > .1:\n        SpeedMult = SpeedMult + -0.1\n        controller_1.screen.clear_row(1)\n        controller_1.screen.set_cursor(controller_1.screen.row(), 1)\n        controller_1.screen.set_cursor(1, 1)\n        controller_1.screen.print(\"Throttle: \")\n        controller_1.screen.print(SpeedMult * 10)\n    else:\n        controller_1.rumble(\".\")\n\ndef onevent_controller_1buttonR1_pressed_0():\n    global SpeedMult, Start_Calibrated, MatchLoad, Expand\n    # Throttle Increase\n    if SpeedMult < .5:\n        SpeedMult = SpeedMult + 0.1\n        controller_1.screen.clear_row(1)\n        controller_1.screen.set_cursor(controller_1.screen.row(), 1)\n        controller_1.screen.set_cursor(1, 1)\n        controller_1.screen.print(\"Throttle: \")\n        controller_1.screen.print(SpeedMult * 10)\n    else:\n        controller_1.rumble(\".\")\n\ndef when_started2():\n    global SpeedMult, Start_Calibrated, MatchLoad, Expand\n    while not Start_Calibrated:\n        wait(5, MSEC)\n    while True:\n        if math.fabs(controller_1.axis2.position()) > 10 or math.fabs(controller_1.axis1.position()) > 10:\n            Forward_Speed(controller_1.axis2.position())\n        if math.fabs(controller_1.axis1.position()) <= 10 and math.fabs(controller_1.axis2.position()) <= 10:\n            Stop_motors()\n        wait(5, MSEC)\n\n# system event handlers\ncontroller_1.buttonL1.pressed(onevent_controller_1buttonL1_pressed_0)\ncontroller_1.buttonR1.pressed(onevent_controller_1buttonR1_pressed_0)\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nws2 = Thread( when_started2 )\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[9],"name":"FrontLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"FrontRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"BackLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"BackRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"Catapult1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"Catapult2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"LeftExpand","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"RightExpand","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22}],"slot":2,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}