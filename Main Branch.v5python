{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nFrontLeft = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nFrontRight = Motor(Ports.PORT10, GearSetting.RATIO_18_1, True)\ncontroller_1 = Controller(PRIMARY)\nBackLeft = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nBackRight = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nCatapult1 = Motor(Ports.PORT8, GearSetting.RATIO_18_1, True)\nCatapult2 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nLeftExpand = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nRightExpand = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nGPS_Sense = Gps(Ports.PORT4, 0.00, 0.00, MM, 180)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\nglobal SpeedMult, MatchLoad, Expand, Preset\n# Sets The Multiplier For The Throttle\nSpeedMult = 1\n# Sets MatchLoading To False\nMatchLoad = False\n# Sets Expanded To False\nExpand = False\n# Sets Preset To False\nPreset = False\nWheelC = 259.34 # Wheel Circumference \nratio = .6 # Wheel Gear Ratio\n# Sets The Motors To Hold Their Position Upon Stopping\nFrontRight.set_stopping(HOLD)\nFrontLeft.set_stopping(HOLD)\nBackRight.set_stopping(HOLD)\nBackLeft.set_stopping(HOLD)\nLeftExpand.set_stopping(HOLD)\nRightExpand.set_stopping(HOLD)\n# Displays The Throttle On The Controller\ncontroller_1.screen.set_cursor(1, 1)\ncontroller_1.screen.print(\"Throttle: \")\n# Throttle Is The Speed Multiplier Times 10\ncontroller_1.screen.print(SpeedMult * 10)\n\n#################### Functions ####################\n\n########## Movement ##########\n\n\ndef Movement_Action(speed, rotate, waits, rev):\n    # Movement_Action(Speed %, Rotate[1=rotate, 0=forward], Wait?[0=n, >0= time inputted], Revolutions?)\n    global SpeedMult\n    if rev > 0:\n        # If A Predefined Amount Of Rotations Is Specified Perform This\n        brain.screen.next_row()\n        brain.screen.print(rev)\n        # Sets Velocity Of Drive To Inputted Value\n        Motor_Velo(speed)\n        brain.screen.next_row()\n        brain.screen.print(\"V1\")\n        # Start The Drive Wheels\n        FrontRight.spin_for(FORWARD, rev, TURNS, wait=False)\n        FrontLeft.spin_for(FORWARD, rev, TURNS, wait=False)\n        BackRight.spin_for(FORWARD, rev, TURNS, wait=False)\n        # Last Wheel Will Prevent Progression Until Turn Is Completed\n        BackLeft.spin_for(FORWARD, rev, TURNS, wait=True)\n        brain.screen.next_row()\n        brain.screen.print(\"Predefined Turn Completed\")\n    elif rotate == 0:\n        # Sets Velocity Of Drive To Inputted Value\n        Motor_Velo(speed)\n        # Start The Drive Wheels\n        FrontRight.spin(FORWARD)\n        FrontLeft.spin(FORWARD)\n        BackRight.spin(FORWARD)\n        BackLeft.spin(FORWARD)\n    else:\n        # Sets Velocity Of Drive To Inputted Value\n        Motor_Velo(speed)\n        # Start The Drive Wheels\n        FrontRight.spin(FORWARD)\n        FrontLeft.spin(REVERSE)\n        BackRight.spin(FORWARD)\n        BackLeft.spin(REVERSE)\n    if waits > 0:\n        # If Wait Was Specified Wait The Amount Of Time Inputted In Seconds Then Stop Drive Motors\n        wait(waits, SECONDS)\n        Stop_motors()\n    \ndef Motor_Velo(speed):\n    # Sets All Drive Motor Velocities To Inputted Value\n    FrontRight.set_velocity(speed, PERCENT)\n    FrontLeft.set_velocity(speed, PERCENT)\n    BackRight.set_velocity(speed, PERCENT)\n    BackLeft.set_velocity(speed, PERCENT)\n    \ndef Stop_motors():\n    # Stops The Drive Motors\n    FrontRight.stop()\n    FrontLeft.stop()\n    BackRight.stop()\n    BackLeft.stop()\n\n\n########## Position Calculation ##########\n\n\ndef TurnTo(degrees):\n    # Overides Stopping\n    global Preset\n    Preset = True\n    # TurnTo(degrees[Angle About The Origin Of Robot])\n    # Sets Margin Of Success\n    askew = 3\n    # Gets The Difference Between The Degrees And The Current Degrees\n    d = GPS_Sense.heading() - degrees % 360\n  \n    if d >= 180 or (d <= 0 and d > -180):\n        # Start The Turn To The Right\n        Movement_Action(10, 1, 0, 0)\n        # Waits Until Heading Is Facing Degree Margin\n        while not GPS_Sense.heading() > degrees - askew: \n            pass\n        # Stop The Drive After The Robot Reaches The Point\n        Stop_motors()\n\n    elif d <= -180 or (d > 0 and d < 180):\n        # Start The Turn To The LEft\n        Movement_Action(-10, 1, 0, 0)\n        # Waits Until Heading Is Facing Degree Margin\n        while not GPS_Sense.heading() < degrees + askew: \n            pass\n        # Stop The Drive After The Robot Reaches The Point\n        Stop_motors()\n    else:\n        # If Result Out Of Bounds\n        brain.screen.print(\"Error\")\n    # Returns Control Of Stopping\n    Preset = False\n\ndef GoTo(x,y,speed):\n    global Preset\n    # Overides Stopping\n    Preset = True\n    # Get The Slope Of The Line Between The Current Position And The Position To Go To\n    deltax = x - GPS_Sense.x_position(MM)\n    deltay = y - GPS_Sense.y_position(MM)\n    # Find The Angle Between The Current Position And The Position To Go To On a Right Triangle Then Convert The Radian Output To Degrees And Locate It On The Unit Circle\n    angle = math.atan2(deltax,deltay) * 180 / math.pi % 360\n    # Calculates The Distance To The Point\n    Dist = math.sqrt(deltax**2 + deltay**2)\n    # Turn To The Angle\n    TurnTo(angle)\n    wait(.2,SECONDS)\n    # Calculates The Number Of Turns The Wheels Need To Make To Reach A Certain Distance\n    turns = Dist / WheelC * ratio\n    # Start The Move\n    Movement_Action(speed, 0, 0, turns)\n    # Stop The Drive After The Robot Reaches The Point\n    Stop_motors()\n    # Returns Control Of Stopping\n    Preset = False\n\n    \n########## Controllers ##########\n\n# Finds Out If A Joystick Is Being Pushed And Runs Its Dedicated Function\ndef ControllerHandler():\n    global Preset\n    while True:\n        if math.fabs(controller_1.axis2.position()) > 10:\n            Movement_Action(controller_1.axis2.position() * SpeedMult, 0, 0, 0)\n\n        elif math.fabs(controller_1.axis2.position()) < 10 and math.fabs(controller_1.axis1.position()) > 10:\n            Movement_Action(controller_1.axis1.position() * SpeedMult, 1, 0, 0)\n        else:\n            if Preset == False:\n                Stop_motors()\n        wait(5, MSEC)\n\n# Left Trigger Pressed\ndef L1():\n    global SpeedMult\n    # Throttle Decrease\n    if SpeedMult > 0:\n        SpeedMult = SpeedMult + -0.1\n        # Update Controller Screen With New Throttle\n        controller_1.screen.clear_row(1)\n        controller_1.screen.set_cursor(controller_1.screen.row(), 1)\n        controller_1.screen.set_cursor(1, 1)\n        controller_1.screen.print(\"Throttle: \")\n        controller_1.screen.print(SpeedMult * 10)\n\n# Right Trigger Pressed\ndef R1():\n    global SpeedMult\n    # Throttle Increase\n    if SpeedMult < 1:\n        SpeedMult = SpeedMult + 0.1\n        # Update Controller Screen With New Throttle\n        controller_1.screen.clear_row(1)\n        controller_1.screen.set_cursor(controller_1.screen.row(), 1)\n        controller_1.screen.set_cursor(1, 1)\n        controller_1.screen.print(\"Throttle: \")\n        controller_1.screen.print(SpeedMult * 10)\n\ndef up():\n    TurnTo(90)\n\ndef right():\n    TurnTo(180)\n\ndef down():\n    TurnTo(270)\n\ndef left():\n    TurnTo(0)\n\n\n########## Robot Elements ##########\n\n\ndef Catapult():\n    global MatchLoad\n    # Makes the catapult spin constantly for match loads\n    while True:\n        if controller_1.buttonB.pressing():\n            while controller_1.buttonB.pressing():\n                wait(5, MSEC)\n            # Starts the catapult\n            MatchLoad = True\n            Catapult1.set_velocity(50, PERCENT)\n            Catapult2.set_velocity(50, PERCENT)\n            Catapult1.spin(REVERSE)\n            Catapult2.spin(REVERSE)\n            controller_1.screen.set_cursor(3, 3)\n            brain.screen.set_pen_color(Color.WHITE)\n            controller_1.screen.print(\"MATCH LOADING\")\n            controller_1.rumble(\"-\")\n            while not controller_1.buttonB.pressing():\n                wait(5, MSEC)\n            while controller_1.buttonB.pressing():\n                wait(5, MSEC)\n            MatchLoad = False\n            Catapult1.stop()\n            Catapult2.stop()\n            controller_1.screen.clear_row(3)\n            controller_1.screen.set_cursor(controller_1.screen.row(), 1)\n        wait(5, MSEC)\n\ndef Expansion():\n    global Expand\n    # Makes the Expansion Lock\n    while True:\n        if controller_1.buttonY.pressing():\n            while controller_1.buttonY.pressing():\n                wait(5, MSEC)\n            # Starts the Expansion\n            Expand = True\n            LeftExpand.set_velocity(10, PERCENT)\n            RightExpand.set_velocity(10, PERCENT)\n            LeftExpand.spin(FORWARD)\n            RightExpand.spin(FORWARD)\n            controller_1.screen.set_cursor(2, 1)\n            controller_1.screen.print(\"EXPANDED\")\n            controller_1.rumble(\"..\")\n            while not controller_1.buttonY.pressing():\n                wait(5, MSEC)\n            while controller_1.buttonY.pressing():\n                wait(5, MSEC)\n            LeftExpand.set_velocity(10, PERCENT)\n            RightExpand.set_velocity(10, PERCENT)\n            LeftExpand.spin(REVERSE)\n            RightExpand.spin(REVERSE)\n            controller_1.screen.set_cursor(2,1)\n            controller_1.screen.print(\"RETRACTING\")\n            controller_1.rumble(\"..\")\n            Expand = False\n            wait(2, SECONDS)\n            LeftExpand.stop()\n            RightExpand.stop()\n            controller_1.screen.clear_row(2)\n        wait(5, MSEC)\n\n\n########## Actions ##########\n\n\n# System Event Handlers\ncontroller_1.buttonL1.pressed(L1)\ncontroller_1.buttonR1.pressed(R1)\ncontroller_1.buttonUp.pressed(up)\ncontroller_1.buttonDown.pressed(down)\ncontroller_1.buttonLeft.pressed(left)\ncontroller_1.buttonRight.pressed(right)\n\n# Add 15ms Delay To Make Sure Events Are Registered Correctly.\nwait(15, MSEC)\n\n# Threads Certain Functions To Allow Them To Work At The Same Time\nws1 = Thread(Catapult)\nws2 = Thread(ControllerHandler)\nws3 = Thread(Expansion)\n","textLanguage":"python","rconfig":[{"port":[9],"name":"FrontLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[10],"name":"FrontRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"BackLeft","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[2],"name":"BackRight","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[8],"name":"Catapult1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[3],"name":"Catapult2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[11],"name":"LeftExpand","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[20],"name":"RightExpand","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[4],"name":"GPS_Sense","customName":true,"deviceType":"GPS","deviceClass":"gps","setting":{"xOffset":"0","xOffsetUnit":"mm","yOffset":"0","yOffsetUnit":"mm","thetaOffset":"180","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}